from flask import Flask, request, jsonify
from functools import wraps

app = Flask(__name__)

books = []
members = []
tokens = {"admin": "secure_token"}

def find_book_by_id(book_id):
    return next((book for book in books if book["id"] == book_id), None)

def find_member_by_id(member_id):
    return next((member for member in members if member["id"] == member_id), None)

def token_required(func):
    @wraps(func)  
    def wrapper(*args, **kwargs):
        token = request.headers.get("Authorization")
        if token not in tokens.values():
            return jsonify({"error": "Unauthorized"}), 401
        return func(*args, **kwargs)
    return wrapper

@app.route("/books", methods=["POST"])
@token_required
def add_book():
    data = request.get_json()
    if not data.get("id") or not data.get("title") or not data.get("author"):
        return jsonify({"error": "Missing fields"}), 400
    if find_book_by_id(data["id"]):
        return jsonify({"error": "Book already exists"}), 400
    books.append(data)
    return jsonify({"message": "Book added successfully"}), 201

@app.route("/books", methods=["GET"])
def get_books():
    title = request.args.get("title")
    author = request.args.get("author")
    page = int(request.args.get("page", 1))
    per_page = int(request.args.get("per_page", 5))

    filtered_books = books
    if title:
        filtered_books = [book for book in filtered_books if title.lower() in book["title"].lower()]
    if author:
        filtered_books = [book for book in filtered_books if author.lower() in book["author"].lower()]

    start = (page - 1) * per_page
    end = start + per_page
    paginated_books = filtered_books[start:end]

    return jsonify({"books": paginated_books, "total": len(filtered_books)}), 200

@app.route("/books/<int:book_id>", methods=["PUT"])
@token_required
def update_book(book_id):
    data = request.get_json()
    book = find_book_by_id(book_id)
    if not book:
        return jsonify({"error": "Book not found"}), 404
    book.update(data)
    return jsonify({"message": "Book updated successfully"}), 200

@app.route("/books/<int:book_id>", methods=["DELETE"])
@token_required
def delete_book(book_id):
    book = find_book_by_id(book_id)
    if not book:
        return jsonify({"error": "Book not found"}), 404
    books.remove(book)
    return jsonify({"message": "Book deleted successfully"}), 200

# Member CRUD operations
@app.route("/members", methods=["POST"])
@token_required
def add_member():
    data = request.get_json()
    if not data.get("id") or not data.get("name"):
        return jsonify({"error": "Missing fields"}), 400
    if find_member_by_id(data["id"]):
        return jsonify({"error": "Member already exists"}), 400
    members.append(data)
    return jsonify({"message": "Member added successfully"}), 201

@app.route("/members", methods=["GET"])
@token_required
def get_members():
    return jsonify({"members": members}), 200

@app.route("/members/<int:member_id>", methods=["PUT"])
@token_required
def update_member(member_id):
    data = request.get_json()
    member = find_member_by_id(member_id)
    if not member:
        return jsonify({"error": "Member not found"}), 404
    member.update(data)
    return jsonify({"message": "Member updated successfully"}), 200

@app.route("/members/<int:member_id>", methods=["DELETE"])
@token_required
def delete_member(member_id):
    member = find_member_by_id(member_id)
    if not member:
        return jsonify({"error": "Member not found"}), 404
    members.remove(member)
    return jsonify({"message": "Member deleted successfully"}), 200

if __name__ == "__main__":
    app.run(debug=True)
